{
  "name": "nopter",
  "description": "A powerful, yet simple command line (CLI) option parser.",
  "version": "0.3.0",
  "homepage": "https://github.com/stevenvachon/nopter",
  "author": {
    "name": "Steven Vachon",
    "email": "contact@svachon.com",
    "url": "http://www.svachon.com/"
  },
  "main": "lib",
  "repository": {
    "type": "git",
    "url": "git://github.com/stevenvachon/nopter.git"
  },
  "bugs": {
    "url": "https://github.com/stevenvachon/nopter/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "caller-path": "~0.1.0",
    "camelcase": "^1.0.2",
    "chalk": "~0.5.1",
    "cli-table": "~0.3.1",
    "eol": "~0.2.0",
    "nopt": "^3.0.1",
    "object-assign": "^2.0.0",
    "splitargs": "~0.0.3"
  },
  "devDependencies": {
    "chai": "^1.10.0",
    "mocha": "^2.0.1"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "mocha test/ --reporter spec --check-leaks --bail --no-exit"
  },
  "files": [
    "lib"
  ],
  "keywords": [
    "args",
    "argv",
    "command",
    "cli",
    "nopt",
    "options",
    "parser",
    "terminal"
  ],
  "readme": "# nopter [![NPM Version](http://badge.fury.io/js/nopter.svg)](http://badge.fury.io/js/nopter) [![Build Status](https://secure.travis-ci.org/stevenvachon/nopter.svg)](http://travis-ci.org/stevenvachon/nopter) [![Build status](https://ci.appveyor.com/api/projects/status/hcw1rfsfb6ph2hhc)](https://ci.appveyor.com/project/stevenvachon/nopter) [![Dependency Status](https://david-dm.org/stevenvachon/nopter.svg)](https://david-dm.org/stevenvachon/nopter)\n\n> Easy command-line executable utilities for Node.js\n\n* Easy to write\n* Easy to test\n* Easy to maintain\n* Built on [nopt](https://npmjs.org/package/nopt) (npm's option parser)\n\n## Installation\n\n[Node.js](http://nodejs.org/) `~0.10` is required. Type this at the command line:\n```shell\nnpm install nopter --save-dev\n```\n\n## Option Parsing\nOptions are defined with [`config()`](#config) and serve as documentation for the help screen. The example below parses args and options from `process.argv`, leaving any remaining args not consumed by options as `input()._remain`.\n```js\n#!/usr/bin/env node\n\nvar nopter = new (require(\"nopter\"))();\n\nnopter.config({\n\ttitle: \"Image Compressor\",\n\tname: \"imgc\",\n\tversion: \"1.0.0\",\n\toptions: {\n\t\t\"compression\": {\n\t\t\tshort: \"c\",\n\t\t\tinfo: \"Compression level (0–100, default=80).\",\n\t\t\ttype: Number,\n\t\t\tdefault: 80\n\t\t},\n\t\t\"input\": {\n\t\t\tinfo: \"Input image.\",\n\t\t\ttype: require(\"path\")\n\t\t}\n\t}\n});\n\nvar args = nopter.input();\n\nif (args.compression) console.log(\"Compression :: \"+args.compression);\nif (args.input) console.log(\"Input File :: \"+args.input);\nif (args._remain.length) console.log(\"Unparsed args :: \"+args._remain);\n```\nShorthand flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `input().templateEngine` etc. unless overridden with [`option.rename`](#configoptions).\n\nFor more ideas, check out the [test fixture](https://github.com/stevenvachon/nopter/tree/master/test/meta/cli.js).\n\n## Customizable Help Screen\n![Help screen](https://raw.github.com/stevenvachon/nopter/master/misc/help-screen.png)\nVia the [`help()`](#help) function.\n\n## Testing\n```js\n// app-cli.js ::::::::::::::::::::\n\nvar nopter = require(\"nopter\");\n\nfunction cli() {\n\tthis.nopter = new nopter();\n\tthis.nopter.config({/* See above example */});\n}\n\ncli.prototype.input = function(args, showArgs) {\n\tvar testing = !!args;\n\targs = this.nopter.input(args);\n\tif (testing && showArgs) return args;\n\tif (args.compression) console.log(\"Compression :: \"+args.compression);\n\tif (args.input) console.log(\"Input File :: \"+args.input);\n};\n\nmodule.exports = cli;\n\n// test.js ::::::::::::::::::::\n\nvar appCLI = require(\"./app-cli.js\");\nvar nopter = require(\"nopter\");\n\nnopter.util.forceColors();\n\nfunction test1() {\n\tvar cli = new appCLI();\n\tvar options = cli.input(\"--input file1 --compression 100\", true);\n\tassert.equal(options.input, \"path/to/file1\");\n\tassert.deepEqual(options, {compression:100, input:\"path/to/file1\"});\n}\n\nfunction test2() {\n\tvar cli = new appCLI();\n\tvar helpScreen = nopter.util.readHelpFile(\"./help.txt\");\n\thelpScreen = nopter.util.replaceColorVars(helpScreen);\n\tassert.equal( cli.input(\"--help\"), helpScreen );\n}\n```\nFor more ideas, check out the [test suite](https://github.com/stevenvachon/nopter/tree/master/test/cli.js).\n\n## Documentation\n\n### Methods\n\n#### config(object)\nGets or sets the [configuration](#Configuration).\n\n* `object` [optional].\n\n#### config.merge(object)\nMerges a new [configuration](#Configuration) with the existing one.\n\n* `object` [optional].\n\n#### error.fatal(error, additional, prefix)\nGets a (red) colored error message with a default `\"Error\"` prefix, but does not display/log it.\n\n* `error` can be an `Error` or `String`. If an `Error`, `error.name` will override the default prefix.\n* `additional` [optional] is a second, uncolored `String` sentence.\n* `prefix` [optional] overrides the default prefix.\n\n#### error.notice(error, additional, prefix)\nGets an uncolored error message with a default `\"Notice\"` prefix, but does not display/log it.\nSee [error.fatal](#errorfatal) for arguments info.\n\n#### error.warn(error, additional, prefix)\nGets a (yellow) colored error message with a default `\"Warning\"` prefix, but does not display/log it.\nSee [error.fatal](#errorfatal) for arguments info.\n\n#### help()\nGets the help screen, but does not display/log it.\n\n#### help.indent()\nGets the indent value for custom additions to the help screen.\n\n#### input(args, slice)\nGets user input parsed by nopt.\n```js\nnopter.input();\nnopter.input(process.argv, 2);\t// same as above\n\nnopter.input(\"app --option value\", 1);\nnopter.input([\"--option\",\"value\"]);\n```\n* `args` [optional] can be an `Array` or `String`. Default value is `process.argv`.\n* `slice` [optional] is a `Number`. [See nopt docs](https://www.npmjs.org/package/nopt#slicing). Unlike nopt, the default value of `2` only applies when `args===process.argv`; otherwise the default value is `0`.\n\n#### util.forceColors(value)\nForces colors in situations where they would normally be disabled such as a [`child_process`](http://nodejs.org/api/child_process.html) and some CI (Continuous Integration) systems. Due to the singleton design of the [color library](https://npmjs.org/package/chalk), this value **applies to all nopter instances**. Colors are not forced by default.\n* `value` [optional] is a `Boolean`. If `undefined`, it will default to `true`.\n\n#### util.readHelpFile(filepath)\nSynchronously reads the contents of a text file and converts to LF line endings for cross-platform support. Useful in testing the output of [`help()`](#help).\n```js\nconsole.log( nopter.util.readHelpFile(\"path/to/file.txt\") );\n//-> This is a text file.\n```\n* `filepath` is a required `String` path, relative to the current module (like [`require(\"./\")`](http://nodejs.org/api/globals.html#globals_require)).\n\n#### util.replaceColorVars(str)\nReplace easy-to-read variables in a `String` with their ANSI counterparts. Useful in testing the output of [`help()`](#help).\n```js\nvar str = \"{{green}}This is a {{bold}}colored{{/bold}} sentence.{{/green}}\";\nconsole.log( nopter.util.replaceColorVars(str) );\n//-> \\u001b[32mThis is a \\u001b[1mcolored\\u001b[22m sentence.\\u001b[39m\n```\n* `str` is a required `String`. Possible [color variables](https://www.npmjs.org/package/chalk).\n\n#### util.stripColors(str)\nRemove all ANSI characters. Useful in testing the output of [`help()`](#help).\n```js\nvar str = \"\\u001b[32mThis is a \\u001b[1mcolored\\u001b[22m sentence.\\u001b[39m\";\nconsole.log( nopter.util.stripColors(str) );\n//-> This is a colored sentence.\n```\n* `str` is a required `String`.\n\n### Configuration\n\n#### config.colors\nType: `Array`  \nDefault value: `[\"red\",\"green\",\"magenta\"]`  \nThe colors used in the help screen. Possible [color values](https://www.npmjs.org/package/chalk), `[null,…]` to disable a color and `null` to disable all colors.\n\n#### config.description\nType: `String`  \nDefault value: `\"\"`  \nThe app description.\n\n#### config.name\nType: `String`  \nDefault value: `\"noname\"`  \nThe app name used in the command line.\n\n#### config.title\nType: `String`  \nDefault value: `config.name.toUpperCase()`  \nThe app title, which is sometimes slightly different from `config.name`.\n\n#### config.version\nType: `String`  \nDefault value: `\"0.0.0\"`  \nThe app version.\n\n#### config.options\nType: `Object`  \nDefault value: `{}`  \nThe command line options.\n```js\noptions: {\n\t\"option-name\": {\n\t\tshort: \"o\",\n\t\tinfo: \"Description of option.\",\n\t\ttype: String\n\t}\n}\n```\n* `option.default` can be any value that is applied when no user value has been supplied.\n* `option.hidden` is a `Boolean` that hides the option from the help screen.\n* `option.info` is a descriptive `String` used in the help screen.\n* `option.rename` can be a `String` or `Boolean`. `false` will disable auto camel-casing. The default value is `true`.\n* `option.short` can be a `String` or `Array`.\n* `option.sort` is a `String` for categorizing the help screen.\n* `option.type` can be any of [these types](https://www.npmjs.org/package/nopt#types). The default type is `String`.\n\n#### config.aliases\nType: `Array`  \nDefault value: `[]`  \nArgument shortcuts to options.\n```js\naliases: [\"option1\",\"option2\"]\n```\nThis would allow something like `app foo bar` to be a CLI shortcut to `app --option1 foo --option2 bar`.\n\n## Roadmap Features\n* add ~~\"safe colors\",~~ cell-span and word-wrap features to cli-table\n* add \"before\" and \"after\" (table?) content for `help()`\n* add `option.alias` shortcut:\n```js\n\"option\": {\n\talias: \"--option1 value -xyz\"\n}\n```\n* add `config.commands` for nested options:\n```js\ncommands: {\n\t\"command\": {\n\t\tinfo: \"A command with specific options.\",\n\t\toptions: {\n\t\t\t\"input\": {\n\t\t\t\tinfo: \"The input file.\"\n\t\t\t\ttype: path\n\t\t\t},\n\t\t\t\"output\": {\n\t\t\t\tinfo: \"The output file.\"\n\t\t\t\ttype: path\n\t\t\t}\n\t\t},\n\t\taliases: [\"input\",\"output\"]\n\t}\n}\n\n//$ app command input.ext output.ext\n```\n* rename `options.aliases` to `options.arguments`?\n* add `util.shell()` for easier project testing?\n\n## Release History\n* 0.3.0\n  * added option auto camel-casing; `option.rename` supports booleans\n  * added `input()._remain`\n  * `option.info` no longer requires a value\n  * `option.type` defaults to type `String`\n* 0.2.1 fixed bug with `util.forceColors(false)`\n* 0.2.0\n  * added `input(args)`, `util.forceColors()`, `util.readHelpFile()`, `util.replaceColorVars()`, `util.stripColors()` for easier project testing\n  * added support for multiple instances (no singleton)\n* 0.1.9 avoided `String.prototype` colors\n* 0.1.8 simplified color test\n* 0.1.7 added `config.colors`, `config.merge()`, `help.indent()`\n* 0.1.6 tested on Windows\n* 0.1.5 added `option.sort`\n* 0.1.4 added `option.rename`\n* 0.1.3 added `option.hidden`\n* 0.1.2 added `option.default`, help screen cleanup\n* 0.1.1 added custom error messages\n* 0.1.0 initial release\n\n---\n\n[![Analytics](https://ga-beacon.appspot.com/UA-3614308-14/stevenvachon/nopter)](https://github.com/igrigorik/ga-beacon \"Google Analytics\")\n",
  "readmeFilename": "README.md",
  "_id": "nopter@0.3.0",
  "_from": "nopter@~0.3.0"
}
