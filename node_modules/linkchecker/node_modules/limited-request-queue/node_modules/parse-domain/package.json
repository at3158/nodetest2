{
  "name": "parse-domain",
  "version": "0.1.2",
  "description": "Splits an url into sub-domain, domain and top-level-domain",
  "main": "./lib/parseDomain.js",
  "scripts": {
    "test": "node node_modules/mocha/bin/mocha -R spec",
    "build-regex": "node lib/build/buildRegex.js"
  },
  "keywords": [
    "domain",
    "url",
    "sub-domain",
    "tld",
    "parse",
    "extract",
    "sanitize",
    "country",
    "top-level"
  ],
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.x",
    "chai": "1.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/peerigon/parse-domain.git"
  },
  "testling": {
    "harness": "mocha",
    "files": "test/parseDomain.test.js",
    "browsers": [
      "ie/8..latest",
      "chrome/27..latest",
      "firefox/22..latest",
      "safari/latest",
      "opera/latest",
      "iphone/latest",
      "ipad/latest",
      "android-browser/latest"
    ]
  },
  "author": {
    "name": "peerigon",
    "email": "developers@peerigon.com"
  },
  "license": "Unlicense",
  "readme": "parse-domain\r\n========================================================================\r\n**Splits an url into sub-domain, domain and top-level-domain.**\r\n\r\nSince domains are handled differently across different countries and organizations, splitting an url into sub-domain, domain and top-level-domain is not a simple regexp. **parse-domain** uses a [large list of known tlds](https://github.com/peerigon/parse-domain/blob/master/lib/build/tld.txt) (borrowed from [http://publicsuffix.org](http://publicsuffix.org/list/effective_tld_names.dat)) to recognize different parts of the domain.\r\n\r\n```javascript\r\nvar parseDomain = require(\"parse-domain\");\r\n\r\nexpect(parseDomain(\"some.subdomain.example.co.uk\")).to.eql({\r\n    subdomain: \"some.subdomain\",\r\n    domain: \"example\",\r\n    tld: \"co.uk\"\r\n});\r\n\r\nexpect(parseDomain(\"https://user:password@example.co.uk:8080/some/path?and&query#hash\")).to.eql({\r\n    subdomain: \"\",\r\n    domain: \"example\",\r\n    tld: \"co.uk\"\r\n});\r\n\r\nexpect(parseDomain(\"unknown.tld.kk\")).to.equal(null);\r\nexpect(parseDomain(\"invalid url\")).to.equal(null);\r\nexpect(parseDomain({})).to.equal(null);\r\n```\r\n\r\n<br />\r\n\r\nSetup\r\n------------------------------------------------------------------------\r\n\r\n[![npm status](https://nodei.co/npm/parse-domain.png?downloads=true&stars=true)](https://npmjs.org/package/parse-domain)\r\n\r\n[![Build Status](https://travis-ci.org/peerigon/parse-domain.svg?branch=master)](https://travis-ci.org/peerigon/parse-domain)\r\n[![Dependency Status](https://david-dm.org/peerigon/parse-domain.svg)](https://david-dm.org/peerigon/parse-domain)\r\n[![Coverage Status](https://img.shields.io/coveralls/peerigon/parse-domain.svg)](https://coveralls.io/r/peerigon/parse-domain?branch=master)\r\n\r\n[![browser support](https://ci.testling.com/peerigon/parse-domain.png)\r\n](https://ci.testling.com/peerigon/parse-domain)\r\n\r\n<br />\r\n\r\nAPI\r\n------------------------------------------------------------------------\r\n\r\n### parseDomain(url: String): ParsedDomain|null\r\n\r\nReturns `null` if `url` has an unknown tld or if it's not a valid url.\r\n\r\n### ParsedDomain\r\n\r\n```\r\n{\r\n    tld: String,\r\n    domain: String,\r\n    subdomain: String\r\n}\r\n```\r\n\r\n<br />\r\n\r\nLicense\r\n------------------------------------------------------------------------\r\n\r\nUnlicense",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peerigon/parse-domain/issues"
  },
  "_id": "parse-domain@0.1.2",
  "_from": "parse-domain@~0.1.2"
}
