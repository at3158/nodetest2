{
  "name": "urlcache",
  "description": "URL key-value cache and store.",
  "version": "0.3.0",
  "license": "MIT",
  "homepage": "https://github.com/stevenvachon/urlcache",
  "author": {
    "name": "Steven Vachon",
    "email": "contact@svachon.com",
    "url": "http://www.svachon.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/stevenvachon/urlcache.git"
  },
  "bugs": {
    "url": "https://github.com/stevenvachon/urlcache/issues"
  },
  "dependencies": {
    "object-assign": "^3.0.0",
    "urlobj": "0.0.7"
  },
  "devDependencies": {
    "bhttp": "^1.2.1",
    "chai": "^3.2.0",
    "mocha": "^2.2.5",
    "node-static": "~0.7.7"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "scripts": {
    "test": "mocha test.js --reporter spec --check-leaks --bail",
    "test-watch": "mocha test.js --reporter spec --check-leaks --bail -w"
  },
  "files": [
    "index.js",
    "license"
  ],
  "keywords": [
    "uri",
    "url",
    "cache"
  ],
  "readme": "# urlcache [![NPM Version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][david-image]][david-url]\n\n> URL key-value cache and store.\n\n## Installation\n\n[Node.js](http://nodejs.org/) `~0.10` is required. To install, type this at the command line:\n\n```shell\nnpm install urlcache --save-dev\n```\n\n\n## Usage\n\n```js\nvar UrlCache = require(\"urlcache\");\nvar cache = new UrlCache(options);\n\ncache.set(\"http://domain.com/#hash\", \"value\");\ncache.set(\"http://domain.com/path/to/something.html\", {\"key\":\"value\"});\n```\n\n\n## Methods\n**Note:** all instances of `url` can be either a `String` or a [`url.parse()`](https://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost)-compatible `Object`.\n\n### .clear([url])\nRemoves `url` from cache (whether defined with `set()` or `setting()`). If `url` is not defined, *all* cached key value pairs will be removed.\n\n### .contains(url)\nReturns `true` if `url` currently has a value stored or in the process of being stored in cache; `false` if it does not.\n\n### .get(url, callback)\nRuns `callback` when the value of `url` has been stored. If called before `set()` and/or `setting()`, the value will be `undefined`.\n```js\ncache.get(\"url\", function(value) {\n    console.log(value);  //-> undefined\n});\n\ncache.setting(\"url\");\ncache.get(\"url\", function(value) {\n    console.log(value);  //-> \"value\"\n});\ncache.set(\"url\", \"value\");\n```\n\n### .set(url, value, expiryTime)\nStores `value` (any type) into `url` key. Optionally, define `expiryTime` to override `options.expiryTime`.\n\n### .setting(url)\nMarks `url` as being in the process of storing its value in cache. If the value of `url` has already been stored, nothing will be marked.\n\n\n## Options\n\n### options.defaultPorts\nType: `Object`  \nDefault value: see [urlobj.parse() options](https://github.com/stevenvachon/urlobj)  \nA map of protocol default ports for `options.normalizeUrls`.\n\n### options.expiryTime\nType: `Number`  \nDefault value: `Infinity`  \nThe number of milliseconds in which a cached value should be considered valid.\n\n### options.normalizeUrls\nType: `Boolean`  \nDefault value: `true`  \nWhen `true`, will remove unnecessary URL parts in order to avoid duplicates in cache.\n\n### options.stripUrlHashes\nType: `Boolean`  \nDefault Value: `true`  \nWhen `true`, will remove `#hashes` from URLs because they are local to the document that contains them.\n\n\n## Changelog\n* 0.3.0 added `options.defaultPorts`, more tests\n* 0.2.0 simplified API\n* 0.1.0 initial release\n\n\n[npm-image]: https://img.shields.io/npm/v/urlcache.svg\n[npm-url]: https://npmjs.org/package/urlcache\n[travis-image]: https://img.shields.io/travis/stevenvachon/urlcache.svg\n[travis-url]: https://travis-ci.org/stevenvachon/urlcache\n[david-image]: https://img.shields.io/david/stevenvachon/urlcache.svg\n[david-url]: https://david-dm.org/stevenvachon/urlcache\n",
  "readmeFilename": "README.md",
  "_id": "urlcache@0.3.0",
  "_from": "urlcache@~0.3.0"
}
