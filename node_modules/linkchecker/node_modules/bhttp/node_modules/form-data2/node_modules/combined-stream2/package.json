{
  "name": "combined-stream2",
  "version": "1.1.1",
  "description": "A drop-in Streams2-compatible replacement for combined-stream.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joepie91/node-combined-stream2"
  },
  "keywords": [
    "stream",
    "combined",
    "multistream",
    "streams2"
  ],
  "author": {
    "name": "Sven Slootweg"
  },
  "license": "WTFPL",
  "devDependencies": {
    "dev-null": "^0.1.1",
    "gulp": "~3.8.0",
    "gulp-cached": "~0.0.3",
    "gulp-coffee": "~2.0.1",
    "gulp-concat": "~2.2.0",
    "gulp-livereload": "~2.1.0",
    "gulp-nodemon": "~1.0.4",
    "gulp-plumber": "~0.6.3",
    "gulp-remember": "~0.2.0",
    "gulp-rename": "~1.2.0",
    "gulp-util": "~2.2.17",
    "request": "^2.53.0"
  },
  "dependencies": {
    "debug": "^2.1.1",
    "bluebird": "^2.8.1",
    "stream-length": "^1.0.1"
  },
  "readme": "# combined-stream2\n\nA drop-in Streams2-compatible replacement for the `combined-stream` module.\n\nSupports most of the `combined-stream` API. Automatically wraps Streams1 streams, so that they work as well.\n\nBoth Promises and nodebacks are supported.\n\n## License\n\n[WTFPL](http://www.wtfpl.net/txt/copying/) or [CC0](https://creativecommons.org/publicdomain/zero/1.0/), whichever you prefer. A donation and/or attribution are appreciated, but not required.\n\n## Donate\n\nMy income consists entirely of donations for my projects. If this module is useful to you, consider [making a donation](http://cryto.net/~joepie91/donate.html)!\n\nYou can donate using Bitcoin, PayPal, Gratipay, Flattr, cash-in-mail, SEPA transfers, and pretty much anything else.\n\n## Contributing\n\nPull requests welcome. Please make sure your modifications are in line with the overall code style, and ensure that you're editing the `.coffee` files, not the `.js` files.\n\nBuild tool of choice is `gulp`; simply run `gulp` while developing, and it will watch for changes.\n\nBe aware that by making a pull request, you agree to release your modifications under the licenses stated above.\n\n## Migrating from `combined-stream`\n\nNote that there are a few important differences between `combined-stream` and `combined-stream2`:\n\n* You cannot supply strings, only Buffers and streams. This is because `combined-stream2` doesn't know what the encoding of your string would be, and can't guess safely. You will need to manually encode strings to a Buffer before passing them on to `combined-stream2`.\n* The `pauseStreams` option does not exist. All streams are read lazily in non-flowing mode; that is, no data is read until something explicitly tries to read the combined stream.\n* The `maxDataSize` option does not exist.\n* The `.write()`, `.end()` and `.destroy()` methods are not (yet) implemented.\n* There is a `.getCombinedStreamLength()` method that asynchronously returns the total length of all streams (or an error if it cannot be determined). __This method will 'resolve' all callback-supplied streams, as if the stream were being read.__\n\nMost usecases will not be affected by these differences, but your mileage may vary.\n\n## Using `combined-stream2` with `request`\n\n__There's an important caveat when trying to append a `request` stream to a `combined-stream2`.__\n\nBecause `request` does a bunch of strange non-standard hackery with streams, it doesn't play nicely with `combined-stream2` (and many other writable/transform streams). For convenience, `combined-stream2` contains a built-in workaround using a `PassThrough` stream specifically for dealing with `request` streams, but __this workaround will likely result in the entire response being buffered into memory.__\n\nPassing in response objects (that is, the object provided in the `response` event handler for a `request` call) is *completely unsupported* - trying to do so will likely break `combined-stream2`. You *must* pass in the `request` object, rather than the `response` object.\n\nI seriously suggest you consider using [`bhttp`](https://www.npmjs.com/package/bhttp) instead - it has much more predictable behaviour.\n\n## Usage\n\n```javascript\nvar CombinedStream = require('combined-stream2');\nvar fs = require('fs');\n\nvar combinedStream = CombinedStream.create();\ncombinedStream.append(fs.createReadStream('file1.txt'));\ncombinedStream.append(fs.createReadStream('file2.txt'));\n\ncombinedStream.pipe(fs.createWriteStream('combined.txt'));\n```\n\n### Appending a stream asynchronously (lazily)\n\nThe function will only be called when you try to either read/pipe the combined stream, or retrieve the total stream length.\n```javascript\ncombinedStream.append(function(next){\n\tnext(fs.createReadStream('file3.txt'));\n});\n```\n\n### Getting the combined length of all streams\n\nSee the API documentation below for more details.\n\n```javascript\nPromise = require(\"bluebird\");\n\nPromise.try(function(){\n\tcombinedStream.getCombinedStreamLength()\n}).then(function(length){\n\tconsole.log(\"Total stream length is \" + length + \" bytes.\");\n}).catch(function(err){\n\tconsole.log(\"Could not determine the total stream length!\");\n});\n```\n\n... or using nodebacks:\n\n```javascript\ncombinedStream.getCombinedStreamLength(function(err, length){\n\tif(err) {\n\t\tconsole.log(\"Could not determine the total stream length!\");\n\t} else {\n\t\tconsole.log(\"Total stream length is \" + length + \" bytes.\");\n\t}\n});\n```\n\n## API\n\nSince `combined-stream2` is a `stream.Readable`, it inherits the [regular Readable stream properties](http://nodejs.org/api/stream.html#stream_class_stream_readable). Aside from that, the following methods exist:\n\n### CombinedStream.create()\n\nCreates and returns a new `combinedStream`. Contrary to the `.create()` method for the original `combined-stream` module, this method does not accept options.\n\n### combinedStream.append(source, [options])\n\nAdds a source to the combined stream. Valid sources are streams, Buffers, and callbacks that return either of the two (asynchronously).\n\n* __source__: The source to add.\n* __options__: *Optional.* Additional stream options.\n\t* __contentLength__: The length of the stream. Useful if your stream type is not supported by [`stream-length`](https://www.npmjs.com/package/stream-length), but you know the length of the stream in advance. Also available as `knownLength` for backwards compatibility reasons.\n\n### combinedStream.getCombinedStreamLength([callback])\n\n__This method will 'resolve' all callback-supplied streams, as if the stream were being read.__\n\nAsynchronously returns the total length of all streams (and Buffers) together. If the total length cannot be determined (ie. at least one of the streams is of an unsupported type), an error is thrown asynchronously.\n\nIf you specify a `callback`, it will be treated as a nodeback. If you do *not* specify a `callback`, a Promise will be returned.\n\nThis functionality uses the [`stream-length`](https://www.npmjs.com/package/stream-length) module.\n\n### combinedStream.pipe(target)\n\nLike for other Streams2 Readable streams, this will start piping the combined stream contents into the `target` stream.\n\nAfter calling this, you can no longer append new streams.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joepie91/node-combined-stream2/issues"
  },
  "_id": "combined-stream2@1.1.1",
  "_from": "combined-stream2@^1.0.2"
}
