{
  "name": "form-data2",
  "version": "1.0.3",
  "description": "A Streams2-compatible drop-in replacement for the `form-data` module.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joepie91/node-form-data2"
  },
  "keywords": [
    "form-data",
    "multipart",
    "http",
    "stream"
  ],
  "author": {
    "name": "Sven Slootweg"
  },
  "license": "WTFPL",
  "devDependencies": {
    "gulp": "~3.8.0",
    "gulp-cached": "~0.0.3",
    "gulp-coffee": "~2.0.1",
    "gulp-concat": "~2.2.0",
    "gulp-livereload": "~2.1.0",
    "gulp-nodemon": "~1.0.4",
    "gulp-plumber": "~0.6.3",
    "gulp-remember": "~0.2.0",
    "gulp-rename": "~1.2.0",
    "gulp-util": "~2.2.17"
  },
  "dependencies": {
    "bluebird": "^2.8.2",
    "combined-stream2": "^1.0.2",
    "debug": "^2.1.1",
    "lodash": "^2.4.1",
    "mime": "^1.2.11",
    "uuid": "^2.0.1"
  },
  "readme": "# form-data2\n\nA Streams2-compatible drop-in replacement for the `form-data` module. Through the wrapping done by the underlying `combined-stream2` module, old-style streams are also supported.\n\nTakes a number of streams or Buffers, and turns them into a valid `multipart/form-data` stream.\n\n## License\n\n[WTFPL](http://www.wtfpl.net/txt/copying/) or [CC0](https://creativecommons.org/publicdomain/zero/1.0/), whichever you prefer. A donation and/or attribution are appreciated, but not required.\n\n## Donate\n\nMy income consists entirely of donations for my projects. If this module is useful to you, consider [making a donation](http://cryto.net/~joepie91/donate.html)!\n\nYou can donate using Bitcoin, PayPal, Gratipay, Flattr, cash-in-mail, SEPA transfers, and pretty much anything else.\n\n## Contributing\n\nPull requests welcome. Please make sure your modifications are in line with the overall code style, and ensure that you're editing the `.coffee` files, not the `.js` files.\n\nBuild tool of choice is `gulp`; simply run `gulp` while developing, and it will watch for changes.\n\nBe aware that by making a pull request, you agree to release your modifications under the licenses stated above.\n\n## Migrating from `form-data`\n\nWhile `form-data2` was designed to be roughly API-compatible with the `form-data` module, there are a few notable differences:\n\n* `form-data2` does __not__ do HTTP requests. It is purely a multipart/form-data encoder. This means you should use a different module for your HTTP requests, such as [`bhttp`](https://www.npmjs.com/package/bhttp), [`request`](https://www.npmjs.com/package/request), or the core `http` module. `bhttp` uses `form-data2` internally - that means you won't have to manually use `form-data2`.\n* The `header` option for the `form.append()` options object is not (yet) implemented. This means that you cannot currently set custom field headers.\n* There is no `form.getLengthSync()` method. Length retrieval is always asynchronous.\n* The `form.getHeaders` method is __always asynchronous__ (whereas in the original `form-data`, it is synchronous). Due to the requirements for obtaining the stream length reliably, there is no synchronous equivalent.\n* A `form-data2` stream is not a real stream. Only the `form.pipe()` method is implemented, other stream methods are unavailable. This may change in the future.\n\n## Usage\n\n```javascript\nvar FormData = require('form-data2');\nvar fs = require('fs');\n\nvar form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```\n\n### Getting the HTTP headers\n\n```javascript\nPromise = require(\"bluebird\");\nutil = require(\"util\");\n\nPromise.try(function(){\n\tform.getHeaders();\n}).then(function(headers){\n\tconsole.log(\"Stream headers:\", util.inspect(headers));\n}).catch(function(err){\n\tconsole.log(\"Something went wrong!\");\n});\n```\n\n... or using nodebacks:\n\n```javascript\nform.getHeaders(function(err, headers){\n\tif(err) {\n\t\tconsole.log(\"Something went wrong!\");\n\t} else {\n\t\tconsole.log(\"Stream headers:\", util.inspect(headers));\n\t}\n});\n```\n\n## API\n\nNote that this is __not__ a real stream, and does therefore not expose the regular `stream.Readable` properties. The `pipe` method will simply pipe the underlying `combined-stream2` stream into the specified target. If you want to access the stream directly for some reason, use `form._stream`.\n\n### append(name, source, [options])\n\nAdds a new data source to the multipart/form-data stream.\n\nThis module will *not* automatically handle arrays for you - if you need to send an array, you will need to call this method for each element individually, using the same `[]`-suffixed field name for each element.\n\n* __name__: The name of the form field.\n* __source__: The data source to add. This can be a stream, a Buffer, or a UTF-8 string.\n* __options__: *Optional.* Additional options for the stream.\n\t* __contentLength__: The total length of the stream. Useful if your stream is of a type that [`stream-length`](https://www.npmjs.com/package/stream-length) can't automatically determine the length of. Also available under the alias `knownLength`, for backwards compatibility reasons.\n\t* __contentType__: The MIME type of the source. It's recommended to *always* specify this manually; however, if it's not supplied, `form-data2` will attempt to determine it for you where possible.\n\t* __filename__: The filename of the source, if it is a file or should be represented as such. It's recommended to *always* specify this manually (if the source is a file of some sort); however, if it's not supplied, `form-data2` will attempt to determine it for you where possible.\n\n### getHeaders([callback])\n\nAsynchronously returns the HTTP request headers that you will need to successfully transmit this stream, as an object.\n\nAll object keys are lower-case. To use the headers, simply merge them into the headers object for your request.\n\nIf you specify a `callback`, it will be treated as a nodeback. If you do *not* specify a `callback`, a Promise will be returned.\n\n### pipe(target)\n\nPipes the `multipart/form-data` stream into the `target` stream.\n\n### done()\n\n__You probably don't need to call this.__\n\nCalling this method will append the multipart/form-data footer to the stream. It is called automatically when you `pipe` the stream into something else.\n\n### getBoundary()\n\n__You probably don't need to call this.__\n\nReturns the form boundary used in the `multipart/form-data` stream.\n\n### getLength([callback])\n\n__You probably don't need to call this.__\n\nAsynchronously returns the total length of the stream in bytes.\n\nIf you specify a `callback`, it will be treated as a nodeback. If you do *not* specify a `callback`, a Promise will be returned.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joepie91/node-form-data2/issues"
  },
  "_id": "form-data2@1.0.3",
  "_from": "form-data2@^1.0.0"
}
