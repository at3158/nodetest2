{
  "name": "stream-length",
  "version": "1.0.2",
  "description": "For a given Buffer or Stream, this module will attempt to determine the total length of the stream contents. It currently supports Buffers, `fs` streams, `http` responses, and `request` objects, and allows for specifying custom stream types.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/joepie91/node-stream-length"
  },
  "keywords": [
    "stream",
    "length",
    "content-length"
  ],
  "author": {
    "name": "Sven Slootweg"
  },
  "license": "WTFPL",
  "dependencies": {
    "bluebird": "^2.6.2"
  },
  "devDependencies": {
    "request": "^2.51.0",
    "gulp": "~3.8.0",
    "gulp-cached": "~0.0.3",
    "gulp-coffee": "~2.0.1",
    "gulp-concat": "~2.2.0",
    "gulp-livereload": "~2.1.0",
    "gulp-nodemon": "~1.0.4",
    "gulp-plumber": "~0.6.3",
    "gulp-remember": "~0.2.0",
    "gulp-rename": "~1.2.0",
    "gulp-util": "~2.2.17"
  },
  "readme": "# stream-length\n\nAttempts to determine the total content length of a Stream or Buffer.\n\nSupports both Promises and nodebacks.\n\n## License\n\n[WTFPL](http://www.wtfpl.net/txt/copying/) or [CC0](https://creativecommons.org/publicdomain/zero/1.0/), whichever you prefer. A donation and/or attribution are appreciated, but not required.\n\n## Donate\n\nMy income consists entirely of donations for my projects. If this module is useful to you, consider [making a donation](http://cryto.net/~joepie91/donate.html)!\n\nYou can donate using Bitcoin, PayPal, Gratipay, Flattr, cash-in-mail, SEPA transfers, and pretty much anything else.\n\n## Contributing\n\nPull requests welcome. Please make sure your modifications are in line with the overall code style, and ensure that you're editing the `.coffee` files, not the `.js` files.\n\nBuild tool of choice is `gulp`; simply run `gulp` while developing, and it will watch for changes.\n\nBe aware that by making a pull request, you agree to release your modifications under the licenses stated above.\n\n## Supported stream types\n\n* Buffers\n* `fs.createReadStream` streams\n* `http.request` and `http.get` responses\n* `request` requests\n* `combined-stream2` streams\n\n## Usage\n\nUsing Promises:\n\n```javascript\nvar streamLength = require(\"stream-length\");\n\nPromise.try(function(){\n\treturn streamLength(fs.createReadStream(\"README.md\"));\n})\n.then(function(result){\n\tconsole.log(\"The length of README.md is \" + result);\n})\n.catch(function(err){\n\tconsole.log(\"Could not determine length. Error: \" + err.toString());\n});\n```\n\nUsing nodebacks:\n\n```javascript\nvar streamLength = require(\"stream-length\");\n\nstreamLength(fs.createReadStream(\"README.md\"), {}, function(err, result){\n\tif(err)\n\t{\n\t\tconsole.log(\"Could not determine length. Error: \" + err.toString());\n\t}\n\telse\n\t{\n\t\tconsole.log(\"The length of README.md is \" + result);\n\t}\n});\n```\n\nCustom lengthRetrievers:\n\n```javascript\nPromise.try(function(){\n\treturn streamLength(fs.createReadStream(\"README.md\"), [\n\t\tfunction(stream, callback){\n\t\t\tdoSomethingWith(stream, function(err, len){\n\t\t\t\tcallback(err ? err : len);\n\t\t\t})\n\t\t}\n\t]);\n})\n.then(function(result){\n\tconsole.log(\"The length of README.md is \" + result);\n})\n.catch(function(err){\n\tconsole.log(\"Could not determine length. Error: \" + err.toString());\n});\n```\n\n\n## API\n\n### streamLength(stream, [options, [callback]])\n\nDetermines the length of `stream`, which can be a supported type of Stream or a Buffer. Optionally you can specify `options`:\n\n* __lengthRetrievers__: An array of (potentially asynchronous) functions for establishing stream lengths. You can specify one or more of these if you wish to extend `stream-length`s list of supported Stream types. Each retriever function is called with a signature of `(stream, callback)` where `stream` is the stream in question, and `callback` can be called with the result. If an Error occurs, simply pass the Error to the callback instead of the value.\n\nIf you define a `callback`, it will be treated as a nodeback and called when the function completes. If you don't, the function will return a Promise that resolves when the function completes.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/joepie91/node-stream-length/issues"
  },
  "_id": "stream-length@1.0.2",
  "_from": "stream-length@^1.0.2"
}
